# Generated by Django 4.2.1 on 2023-06-09 07:42

from django.db import migrations, models
import django.db.models.deletion
import exercises.models
import exercises.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Etag',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enumber', models.PositiveSmallIntegerField()),
                ('title', models.CharField(max_length=50)),
                ('title_en', models.CharField(max_length=50, null=True)),
                ('title_de', models.CharField(max_length=50, null=True)),
                ('question', models.TextField()),
                ('question_en', models.TextField(null=True)),
                ('question_de', models.TextField(null=True)),
                ('points', models.FloatField(default=5.0)),
                ('difficulty', models.IntegerField(choices=[(1, 'Easy'), (2, 'Normal'), (3, 'Hard')], default=1)),
                ('check_order', models.BooleanField(default=False, help_text='If true it the user query result must have the              same order as the solution query result')),
                ('mandatory_list', models.TextField(blank=True, default='[  ]', help_text='\n        Case-insensitive list of SQL Keywords which must be used in the solution.\n        Example: ["Right Join", "MINUS"]\n        ')),
                ('deny_list', models.TextField(blank=True, default='[  ]', help_text='\n        Case-insensitive list of SQL Keywords which must not be used in\n          the solution.\n        Example: ["Right Join", "MINUS"]\n        ')),
                ('is_select', models.BooleanField(default=True, help_text='\n        For Evaluation of the user solution\n        If true: After the user query is executed the eval_statement will be executed            the result of the statement will be set as is_correct\n        ')),
                ('eval_statement', exercises.utils.SQLField(blank=True, help_text='For non-SELECT-Statements:\n        Outputs true if UserSolution correct otherwise false.\n        Example:    Exercise: Delete all images that are not assigned to a collection.\n                    eval_statement: \n                        "SELECT NOT EXISTS(\n                            SELECT photo from photo\n                            except\n                            select photo from collectphoto\n                        ) AS out;"\n        ', null=True)),
            ],
            options={
                'ordering': ['topic', 'enumber'],
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snumber', models.PositiveSmallIntegerField()),
                ('sql', exercises.utils.SQLField()),
                ('description', models.TextField(blank=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('description_de', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['exercise', 'snumber'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('short', models.SlugField(max_length=10, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('title_en', models.CharField(max_length=50, null=True)),
                ('title_de', models.CharField(max_length=50, null=True)),
                ('visible', models.BooleanField(default=False)),
                ('datamodel_representation', models.FileField(upload_to=exercises.models.topic_path)),
                ('datamodel_script', models.FileField(upload_to=exercises.models.topic_path)),
            ],
            options={
                'ordering': ['tag', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Ttag',
            fields=[
                ('name', models.CharField(max_length=20, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='UserExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_correct', models.BooleanField(null=True)),
                ('buffer_save', models.TextField(blank=True)),
                ('favourite', models.BooleanField(default=False)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exercises.exercise')),
            ],
            options={
                'ordering': ['user', 'exercise'],
            },
        ),
    ]
