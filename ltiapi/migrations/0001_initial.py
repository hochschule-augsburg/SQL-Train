# Generated by Django 4.2.1 on 2023-07-04 12:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("lti1p3_tool_config", "0002_alter_ltitool_id_alter_ltitoolkey_id"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="LTIUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "lms_username",
                    models.CharField(
                        default="Not_from_LMS",
                        help_text="Unique username from lms",
                        max_length=150,
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("course_id", models.IntegerField()),
                ("lms", models.CharField(max_length=100)),
                ("label", models.CharField(max_length=100, null=True)),
                ("title", models.CharField(max_length=100, null=True)),
                ("type", models.TextField(null=True)),
                ("locale", models.CharField(max_length=10, null=True)),
                ("document_target", models.CharField(max_length=50, null=True)),
                ("return_url", models.URLField(null=True)),
                ("tool_title", models.CharField(max_length=100, null=True)),
                ("tool_description", models.TextField(null=True)),
                ("tool_id", models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="OneOffRegistrationLink",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "consumer_name",
                    models.CharField(
                        help_text="Name of the LTI consumer to register",
                        max_length=64,
                        validators=[django.core.validators.MinLengthValidator(5)],
                        verbose_name="consumer name",
                    ),
                ),
                (
                    "consumer_registration_timestamp",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="consumer registration timestamp",
                    ),
                ),
                (
                    "registered_consumer",
                    models.OneToOneField(
                        blank=True,
                        help_text="only fills after registration completed",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lti1p3_tool_config.ltitool",
                        verbose_name="registered consumer",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="course",
            constraint=models.UniqueConstraint(
                fields=("course_id", "lms"), name="lms_course"
            ),
        ),
        migrations.AddField(
            model_name="ltiuser",
            name="course",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="ltiapi.course",
            ),
        ),
        migrations.AddField(
            model_name="ltiuser",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="ltiuser",
            name="registered_via",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="lti1p3_tool_config.ltitool",
                verbose_name="registered via",
            ),
        ),
        migrations.AddField(
            model_name="ltiuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddConstraint(
            model_name="ltiuser",
            constraint=models.UniqueConstraint(
                fields=("lms_username", "course"), name="user_course"
            ),
        ),
    ]
