// SPDX-FileCopyrightText: 2023 2023, Nicolas Bota, Marcel Geiger, Florian Paul, Rajbir Singh, Niklas Sirch, Jan Swiridow, Duc Minh Vu, Mike Wegele
//
// SPDX-License-Identifier: CC0-1.0
// SPDX-License-Identifier: GPL-3.0-or-later

/* tslint:disable */
/* eslint-disable */
/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration"
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
    DUMMY_BASE_URL,
    assertParamExists,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
} from "./common"
import type { RequestArgs } from "./base"
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base"

/**
 *
 * @export
 * @interface Analysis
 */
export interface Analysis {
    /**
     *
     * @type {number}
     * @memberof Analysis
     */
    total: number
    /**
     *
     * @type {number}
     * @memberof Analysis
     */
    started: number
    /**
     *
     * @type {number}
     * @memberof Analysis
     */
    correct: number
    /**
     *
     * @type {number}
     * @memberof Analysis
     */
    wrong: number
}
/**
 *
 * @export
 * @interface CheckAnswerOut
 */
export interface CheckAnswerOut {
    /**
     *
     * @type {boolean}
     * @memberof CheckAnswerOut
     */
    correct: boolean
    /**
     *
     * @type {string}
     * @memberof CheckAnswerOut
     */
    message?: string
    /**
     *
     * @type {Result}
     * @memberof CheckAnswerOut
     */
    user_result: Result
    /**
     *
     * @type {Result}
     * @memberof CheckAnswerOut
     */
    solu_result: Result
}
/**
 *
 * @export
 * @interface Course
 */
export interface Course {
    /**
     *
     * @type {number}
     * @memberof Course
     */
    user_num: number
}
/**
 *
 * @export
 * @interface Course
 */
export interface Course {
    /**
     *
     * @type {number}
     * @memberof Course
     */
    user_num: number
}
/**
 *
 * @export
 * @interface Etag
 */
export interface Etag {
    /**
     *
     * @type {string}
     * @memberof Etag
     */
    name: string
}
/**
 *
 * @export
 * @interface Exercise
 */
export interface Exercise {
    /**
     *
     * @type {number}
     * @memberof Exercise
     */
    id?: number
    /**
     *
     * @type {string}
     * @memberof Exercise
     */
    topic: string
    /**
     *
     * @type {number}
     * @memberof Exercise
     */
    enumber: number
    /**
     *
     * @type {string}
     * @memberof Exercise
     */
    title: string
    /**
     *
     * @type {string}
     * @memberof Exercise
     */
    question: string
    /**
     *
     * @type {number}
     * @memberof Exercise
     */
    difficulty?: number
    /**
     *
     * @type {number}
     * @memberof Exercise
     */
    points?: number
    /**
     *
     * @type {Array<string>}
     * @memberof Exercise
     */
    tags: Array<string>
}
/**
 *
 * @export
 * @interface ExerciseItem
 */
export interface ExerciseItem {
    /**
     *
     * @type {number}
     * @memberof ExerciseItem
     */
    id?: number
    /**
     *
     * @type {string}
     * @memberof ExerciseItem
     */
    topic: string
    /**
     *
     * @type {number}
     * @memberof ExerciseItem
     */
    enumber: number
    /**
     *
     * @type {number}
     * @memberof ExerciseItem
     */
    difficulty?: number
    /**
     *
     * @type {number}
     * @memberof ExerciseItem
     */
    points?: number
    /**
     *
     * @type {Array<string>}
     * @memberof ExerciseItem
     */
    tags: Array<string>
}
/**
 *
 * @export
 * @interface ExerciseItem
 */
export interface ExerciseItem {
    /**
     *
     * @type {number}
     * @memberof ExerciseItem
     */
    id?: number
    /**
     *
     * @type {string}
     * @memberof ExerciseItem
     */
    topic: string
    /**
     *
     * @type {number}
     * @memberof ExerciseItem
     */
    enumber: number
    /**
     *
     * @type {number}
     * @memberof ExerciseItem
     */
    difficulty?: number
    /**
     *
     * @type {number}
     * @memberof ExerciseItem
     */
    points?: number
    /**
     *
     * @type {Array<string>}
     * @memberof ExerciseItem
     */
    tags: Array<string>
}
/**
 *
 * @export
 * @interface ExerciseSpec
 */
export interface ExerciseSpec {
    /**
     *
     * @type {number}
     * @memberof ExerciseSpec
     */
    enumber: number
    /**
     *
     * @type {boolean}
     * @memberof ExerciseSpec
     */
    is_correct?: boolean
    /**
     *
     * @type {boolean}
     * @memberof ExerciseSpec
     */
    favourite: boolean
}
/**
 *
 * @export
 * @interface ExerciseSpeciIn
 */
export interface ExerciseSpeciIn {
    /**
     *
     * @type {string}
     * @memberof ExerciseSpeciIn
     */
    topic_short: string
    /**
     *
     * @type {number}
     * @memberof ExerciseSpeciIn
     */
    enumber: number
}
/**
 *
 * @export
 * @interface Favourite
 */
export interface Favourite {
    /**
     *
     * @type {string}
     * @memberof Favourite
     */
    topic_short: string
    /**
     *
     * @type {string}
     * @memberof Favourite
     */
    topic_title: string
    /**
     *
     * @type {number}
     * @memberof Favourite
     */
    enumber: number
    /**
     *
     * @type {number}
     * @memberof Favourite
     */
    difficulty: number
}
/**
 *
 * @export
 * @interface Feedback
 */
export interface Feedback {
    /**
     *
     * @type {FeedbackMessage}
     * @memberof Feedback
     */
    general: FeedbackMessage
    /**
     *
     * @type {FeedbackMessage}
     * @memberof Feedback
     */
    ui: FeedbackMessage
    /**
     *
     * @type {FeedbackMessage}
     * @memberof Feedback
     */
    ux: FeedbackMessage
    /**
     *
     * @type {string}
     * @memberof Feedback
     */
    improvements?: string
}
/**
 *
 * @export
 * @interface FeedbackMessage
 */
export interface FeedbackMessage {
    /**
     *
     * @type {number}
     * @memberof FeedbackMessage
     */
    stars: number
    /**
     *
     * @type {string}
     * @memberof FeedbackMessage
     */
    praise?: string
    /**
     *
     * @type {string}
     * @memberof FeedbackMessage
     */
    criticism?: string
}
/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     *
     * @type {string}
     * @memberof Message
     */
    message: string
}
/**
 *
 * @export
 * @interface QueryIn
 */
export interface QueryIn {
    /**
     *
     * @type {string}
     * @memberof QueryIn
     */
    topic_short: string
    /**
     *
     * @type {number}
     * @memberof QueryIn
     */
    enumber: number
    /**
     *
     * @type {string}
     * @memberof QueryIn
     */
    query: string
}
/**
 *
 * @export
 * @interface QueryOut
 */
export interface QueryOut {
    /**
     *
     * @type {Result}
     * @memberof QueryOut
     */
    result: Result
}
/**
 * Schema for result data and marking for wrong columns and rows. Leave miss_* to default if no marking is needed
 * @export
 * @interface Result
 */
export interface Result {
    /**
     *
     * @type {Array<object>}
     * @memberof Result
     */
    result: Array<object>
    /**
     *
     * @type {Array<string>}
     * @memberof Result
     */
    miss_cols?: Array<string>
    /**
     *
     * @type {Array<number>}
     * @memberof Result
     */
    miss_rows?: Array<number>
}
/**
 *
 * @export
 * @interface Solution
 */
export interface Solution {
    /**
     *
     * @type {number}
     * @memberof Solution
     */
    id?: number
    /**
     *
     * @type {number}
     * @memberof Solution
     */
    exercise: number
    /**
     *
     * @type {number}
     * @memberof Solution
     */
    snumber: number
    /**
     *
     * @type {string}
     * @memberof Solution
     */
    sql: string
    /**
     *
     * @type {string}
     * @memberof Solution
     */
    description?: string
}
/**
 *
 * @export
 * @interface Stats
 */
export interface Stats {
    /**
     *
     * @type {number}
     * @memberof Stats
     */
    total: number
    /**
     *
     * @type {number}
     * @memberof Stats
     */
    started: number
    /**
     *
     * @type {number}
     * @memberof Stats
     */
    correct: number
    /**
     *
     * @type {number}
     * @memberof Stats
     */
    wrong: number
}
/**
 *
 * @export
 * @interface Topic
 */
export interface Topic {
    /**
     *
     * @type {string}
     * @memberof Topic
     */
    short?: string
    /**
     *
     * @type {string}
     * @memberof Topic
     */
    title: string
    /**
     *
     * @type {string}
     * @memberof Topic
     */
    datamodel_representation: string
    /**
     *
     * @type {string}
     * @memberof Topic
     */
    tag?: string
}
/**
 * Used for listing exercises grouped by topic
 * @export
 * @interface TopicExercise
 */
export interface TopicExercise {
    /**
     *
     * @type {string}
     * @memberof TopicExercise
     */
    topic_short: string
    /**
     *
     * @type {string}
     * @memberof TopicExercise
     */
    topic_title: string
    /**
     *
     * @type {Array<ExerciseSpec>}
     * @memberof TopicExercise
     */
    exercises: Array<ExerciseSpec>
}
/**
 *
 * @export
 * @interface TopicOverview
 */
export interface TopicOverview {
    /**
     *
     * @type {string}
     * @memberof TopicOverview
     */
    topic: string
    /**
     *
     * @type {number}
     * @memberof TopicOverview
     */
    count_exercises: number
    /**
     *
     * @type {number}
     * @memberof TopicOverview
     */
    count_correct: number
}
/**
 *
 * @export
 * @interface Ttag
 */
export interface Ttag {
    /**
     *
     * @type {string}
     * @memberof Ttag
     */
    name: string
}
/**
 *
 * @export
 * @interface UserExercise
 */
export interface UserExercise {
    /**
     *
     * @type {number}
     * @memberof UserExercise
     */
    id?: number
    /**
     *
     * @type {number}
     * @memberof UserExercise
     */
    exercise: number
    /**
     *
     * @type {boolean}
     * @memberof UserExercise
     */
    is_correct?: boolean
    /**
     *
     * @type {boolean}
     * @memberof UserExercise
     */
    favourite?: boolean
    /**
     *
     * @type {string}
     * @memberof UserExercise
     */
    buffer_save?: string
}
/**
 *
 * @export
 * @interface UserExerciseIn
 */
export interface UserExerciseIn {
    /**
     *
     * @type {string}
     * @memberof UserExerciseIn
     */
    buffer_save?: string
    /**
     *
     * @type {boolean}
     * @memberof UserExerciseIn
     */
    favourite?: boolean
}
/**
 * Used for lists
 * @export
 * @interface UserExerciseItem
 */
export interface UserExerciseItem {
    /**
     *
     * @type {number}
     * @memberof UserExerciseItem
     */
    id?: number
    /**
     *
     * @type {number}
     * @memberof UserExerciseItem
     */
    exercise: number
    /**
     *
     * @type {boolean}
     * @memberof UserExerciseItem
     */
    is_correct?: boolean
    /**
     *
     * @type {boolean}
     * @memberof UserExerciseItem
     */
    favourite?: boolean
}
/**
 *
 * @export
 * @interface Userdata
 */
export interface Userdata {
    /**
     *
     * @type {string}
     * @memberof Userdata
     */
    username: string
    /**
     *
     * @type {string}
     * @memberof Userdata
     */
    course_locale?: string
    /**
     *
     * @type {string}
     * @memberof Userdata
     */
    course_title?: string
    /**
     *
     * @type {string}
     * @memberof Userdata
     */
    course_return_url?: string
    /**
     *
     * @type {boolean}
     * @memberof Userdata
     */
    lecturer: boolean
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
    configuration?: Configuration,
) {
    return {
        /**
         * Returns analysis for given filter :returns:   - total:    Total number of exercises fiting the filter             - started:  Number of exercises with just a buffer that were never checked             - correct:  Number of correct exercises             - wrong:    Number of wrong exercises
         * @summary Exercises
         * @param {Array<string>} [topics]
         * @param {Array<string>} [itopicTitles]
         * @param {Array<number>} [enumbers]
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [etags]
         * @param {Array<string>} [ttags]
         * @param {Array<number>} [diffs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesAnalysisApiExercises: async (
            topics?: Array<string>,
            itopicTitles?: Array<string>,
            enumbers?: Array<number>,
            ititles?: Array<string>,
            etags?: Array<string>,
            ttags?: Array<string>,
            diffs?: Array<number>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/analysis/exercises`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            if (topics) {
                localVarQueryParameter["topics"] = topics
            }

            if (itopicTitles) {
                localVarQueryParameter["itopic_titles"] = itopicTitles
            }

            if (enumbers) {
                localVarQueryParameter["enumbers"] = enumbers
            }

            if (ititles) {
                localVarQueryParameter["ititles"] = ititles
            }

            if (etags) {
                localVarQueryParameter["etags"] = etags
            }

            if (ttags) {
                localVarQueryParameter["ttags"] = ttags
            }

            if (diffs) {
                localVarQueryParameter["diffs"] = diffs
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns the info about the tool usage by course
         * @summary Filter Topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesAnalysisApiFilterTopic: async (
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/analysis/course`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns exercise field by enumber and topic_short.
         * @summary Get Exercise
         * @param {string} topicShort
         * @param {number} enumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetExercise: async (
            topicShort: string,
            enumber: number,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'topicShort' is not null or undefined
            assertParamExists(
                "exercisesApiGetExercise",
                "topicShort",
                topicShort,
            )
            // verify required parameter 'enumber' is not null or undefined
            assertParamExists("exercisesApiGetExercise", "enumber", enumber)
            const localVarPath = `/api/exercise/{topic_short}/{enumber}`
                .replace(
                    `{${"topic_short"}}`,
                    encodeURIComponent(String(topicShort)),
                )
                .replace(`{${"enumber"}}`, encodeURIComponent(String(enumber)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return solution fields by snumber, enumber, topic_short
         * @summary Get Solution
         * @param {string} topicShort
         * @param {number} enumber
         * @param {number} snumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetSolution: async (
            topicShort: string,
            enumber: number,
            snumber: number,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'topicShort' is not null or undefined
            assertParamExists(
                "exercisesApiGetSolution",
                "topicShort",
                topicShort,
            )
            // verify required parameter 'enumber' is not null or undefined
            assertParamExists("exercisesApiGetSolution", "enumber", enumber)
            // verify required parameter 'snumber' is not null or undefined
            assertParamExists("exercisesApiGetSolution", "snumber", snumber)
            const localVarPath =
                `/api/solution/{topic_short}/{enumber}/{snumber}`
                    .replace(
                        `{${"topic_short"}}`,
                        encodeURIComponent(String(topicShort)),
                    )
                    .replace(
                        `{${"enumber"}}`,
                        encodeURIComponent(String(enumber)),
                    )
                    .replace(
                        `{${"snumber"}}`,
                        encodeURIComponent(String(snumber)),
                    )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns topic fields for topic_short.
         * @summary Get Topic
         * @param {string} topicShort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetTopic: async (
            topicShort: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'topicShort' is not null or undefined
            assertParamExists("exercisesApiGetTopic", "topicShort", topicShort)
            const localVarPath = `/api/topic/{topic_short}`.replace(
                `{${"topic_short"}}`,
                encodeURIComponent(String(topicShort)),
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return for all topics the number of exercises and the number of exercises correctly done by the current user.
         * @summary Get Topics Overview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetTopicsOverview: async (
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/topics_overview`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return user data for exercise by enumber and topic_short.
         * @summary Get User Exercise
         * @param {string} topicShort
         * @param {number} enumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetUserExercise: async (
            topicShort: string,
            enumber: number,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'topicShort' is not null or undefined
            assertParamExists(
                "exercisesApiGetUserExercise",
                "topicShort",
                topicShort,
            )
            // verify required parameter 'enumber' is not null or undefined
            assertParamExists("exercisesApiGetUserExercise", "enumber", enumber)
            const localVarPath = `/api/user_exercise/{topic_short}/{enumber}`
                .replace(
                    `{${"topic_short"}}`,
                    encodeURIComponent(String(topicShort)),
                )
                .replace(`{${"enumber"}}`, encodeURIComponent(String(enumber)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns username of current user.
         * @summary Get Userdata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetUserdata: async (
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/userdata`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of all exercise tags.
         * @summary List Etag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListEtag: async (
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/etags`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of all exercises optionally filtered by topic_short.
         * @summary List Exercise
         * @param {string} [topicShort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListExercise: async (
            topicShort?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/list_exercises`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            if (topicShort !== undefined) {
                localVarQueryParameter["topic_short"] = topicShort
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return all favourites of current user optionally filtered by topic_short.
         * @summary List Favourite
         * @param {string} [topicShort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListFavourite: async (
            topicShort?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/favourite_list`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            if (topicShort !== undefined) {
                localVarQueryParameter["topic_short"] = topicShort
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return all solutions optionally filtered by enumber and topic_short.
         * @summary List Solution
         * @param {string} [topicShort]
         * @param {number} [enumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListSolution: async (
            topicShort?: string,
            enumber?: number,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/solutions`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            if (topicShort !== undefined) {
                localVarQueryParameter["topic_short"] = topicShort
            }

            if (enumber !== undefined) {
                localVarQueryParameter["enumber"] = enumber
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of all topics.
         * @summary List Topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListTopic: async (
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/list_topics`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of all topic tags.
         * @summary List Ttag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListTtag: async (
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/ttags`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return all exercise user data optionally filtered by topic_short.
         * @summary List User Exercise
         * @param {string} [topicShort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListUserExercise: async (
            topicShort?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/user_exercises`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            if (topicShort !== undefined) {
                localVarQueryParameter["topic_short"] = topicShort
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Patches current user\'s exercise (topic_short, enumber) by provided data.
         * @summary Patch User Exercise
         * @param {string} topicShort
         * @param {number} enumber
         * @param {UserExerciseIn} userExerciseIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiPatchUserExercise: async (
            topicShort: string,
            enumber: number,
            userExerciseIn: UserExerciseIn,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'topicShort' is not null or undefined
            assertParamExists(
                "exercisesApiPatchUserExercise",
                "topicShort",
                topicShort,
            )
            // verify required parameter 'enumber' is not null or undefined
            assertParamExists(
                "exercisesApiPatchUserExercise",
                "enumber",
                enumber,
            )
            // verify required parameter 'userExerciseIn' is not null or undefined
            assertParamExists(
                "exercisesApiPatchUserExercise",
                "userExerciseIn",
                userExerciseIn,
            )
            const localVarPath = `/api/user_exercise`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "PATCH",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            if (topicShort !== undefined) {
                localVarQueryParameter["topic_short"] = topicShort
            }

            if (enumber !== undefined) {
                localVarQueryParameter["enumber"] = enumber
            }

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                userExerciseIn,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a filtered list of exercises optionally filtered with AND concat.
         * @summary Filter Exercises
         * @param {Array<string>} [topics]
         * @param {Array<string>} [itopicTitles]
         * @param {Array<number>} [enumbers]
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [etags]
         * @param {Array<string>} [ttags]
         * @param {Array<number>} [diffs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesFilterApiFilterExercises: async (
            topics?: Array<string>,
            itopicTitles?: Array<string>,
            enumbers?: Array<number>,
            ititles?: Array<string>,
            etags?: Array<string>,
            ttags?: Array<string>,
            diffs?: Array<number>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/filter/filter_exercises`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            if (topics) {
                localVarQueryParameter["topics"] = topics
            }

            if (itopicTitles) {
                localVarQueryParameter["itopic_titles"] = itopicTitles
            }

            if (enumbers) {
                localVarQueryParameter["enumbers"] = enumbers
            }

            if (ititles) {
                localVarQueryParameter["ititles"] = ititles
            }

            if (etags) {
                localVarQueryParameter["etags"] = etags
            }

            if (ttags) {
                localVarQueryParameter["ttags"] = ttags
            }

            if (diffs) {
                localVarQueryParameter["diffs"] = diffs
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a filtered list of topics optionally filtered like filter_exercises.
         * @summary Filter Topic
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [tags]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesFilterApiFilterTopic: async (
            ititles?: Array<string>,
            tags?: Array<string>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/filter/filter_topics`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            if (ititles) {
                localVarQueryParameter["ititles"] = ititles
            }

            if (tags) {
                localVarQueryParameter["tags"] = tags
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns the info about the tool usage by course
         * @summary Course Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesStatsApiCourseInfo: async (
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/stats/course`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns analysis for given filter :returns:   - total:    Total number of exercises fiting the filter times users             - started:  Number of exercises with just a buffer that were never checked             - correct:  Number of correct exercises             - wrong:    Number of wrong exercises
         * @summary Exercises
         * @param {Array<string>} [topics]
         * @param {Array<string>} [itopicTitles]
         * @param {Array<number>} [enumbers]
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [etags]
         * @param {Array<string>} [ttags]
         * @param {Array<number>} [diffs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesStatsApiExercises: async (
            topics?: Array<string>,
            itopicTitles?: Array<string>,
            enumbers?: Array<number>,
            ititles?: Array<string>,
            etags?: Array<string>,
            ttags?: Array<string>,
            diffs?: Array<number>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/stats/exercises`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "GET",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (topics) {
                localVarQueryParameter["topics"] = topics
            }

            if (itopicTitles) {
                localVarQueryParameter["itopic_titles"] = itopicTitles
            }

            if (enumbers) {
                localVarQueryParameter["enumbers"] = enumbers
            }

            if (ititles) {
                localVarQueryParameter["ititles"] = ititles
            }

            if (etags) {
                localVarQueryParameter["etags"] = etags
            }

            if (ttags) {
                localVarQueryParameter["ttags"] = ttags
            }

            if (diffs) {
                localVarQueryParameter["diffs"] = diffs
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Create Feedback. Only 3 Feedbacks are allowed.
         * @summary Create Feedback
         * @param {Feedback} feedback
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackApiCreateFeedback: async (
            feedback: Feedback,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'feedback' is not null or undefined
            assertParamExists("feedbackApiCreateFeedback", "feedback", feedback)
            const localVarPath = `/api/feedback/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "POST",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                feedback,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Executes Query with checking correctness, saves buffer and correctness This also resets the DB.
         * @summary Check Answer Correct Api
         * @param {QueryIn} queryIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pgStudApiCheckAnswerCorrectApi: async (
            queryIn: QueryIn,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'queryIn' is not null or undefined
            assertParamExists(
                "pgStudApiCheckAnswerCorrectApi",
                "queryIn",
                queryIn,
            )
            const localVarPath = `/api/pg-stud/check_answer_correct/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "POST",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                queryIn,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * If the schema for the topic is not installed the db will be installed. enumber is being ignored
         * @summary Check Or Install Db
         * @param {ExerciseSpeciIn} exerciseSpeciIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pgStudApiCheckOrInstallDb: async (
            exerciseSpeciIn: ExerciseSpeciIn,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'exerciseSpeciIn' is not null or undefined
            assertParamExists(
                "pgStudApiCheckOrInstallDb",
                "exerciseSpeciIn",
                exerciseSpeciIn,
            )
            const localVarPath = `/api/pg-stud/check_or_install_db/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "POST",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                exerciseSpeciIn,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Executes Query without checking correctness and saves buffer Does not reset DB
         * @summary Execute Query
         * @param {QueryIn} queryIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pgStudApiExecuteQuery: async (
            queryIn: QueryIn,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'queryIn' is not null or undefined
            assertParamExists("pgStudApiExecuteQuery", "queryIn", queryIn)
            const localVarPath = `/api/pg-stud/execute_query/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "POST",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                queryIn,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Resets DB to specific exercise
         * @summary Reset Db
         * @param {ExerciseSpeciIn} exerciseSpeciIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pgStudApiResetDb: async (
            exerciseSpeciIn: ExerciseSpeciIn,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'exerciseSpeciIn' is not null or undefined
            assertParamExists(
                "pgStudApiResetDb",
                "exerciseSpeciIn",
                exerciseSpeciIn,
            )
            const localVarPath = `/api/pg-stud/reset_db/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "POST",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                exerciseSpeciIn,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns the output of the Solution number 1 after reseting the DB
         * @summary Solution Result
         * @param {ExerciseSpeciIn} exerciseSpeciIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pgStudApiSolutionResult: async (
            exerciseSpeciIn: ExerciseSpeciIn,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'exerciseSpeciIn' is not null or undefined
            assertParamExists(
                "pgStudApiSolutionResult",
                "exerciseSpeciIn",
                exerciseSpeciIn,
            )
            const localVarPath = `/api/pg-stud/solution_result/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: "POST",
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            // authentication SessionAuth required

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                exerciseSpeciIn,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns analysis for given filter :returns:   - total:    Total number of exercises fiting the filter             - started:  Number of exercises with just a buffer that were never checked             - correct:  Number of correct exercises             - wrong:    Number of wrong exercises
         * @summary Exercises
         * @param {Array<string>} [topics]
         * @param {Array<string>} [itopicTitles]
         * @param {Array<number>} [enumbers]
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [etags]
         * @param {Array<string>} [ttags]
         * @param {Array<number>} [diffs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesAnalysisApiExercises(
            topics?: Array<string>,
            itopicTitles?: Array<string>,
            enumbers?: Array<number>,
            ititles?: Array<string>,
            etags?: Array<string>,
            ttags?: Array<string>,
            diffs?: Array<number>,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Analysis>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesAnalysisApiExercises(
                    topics,
                    itopicTitles,
                    enumbers,
                    ititles,
                    etags,
                    ttags,
                    diffs,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns the info about the tool usage by course
         * @summary Filter Topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesAnalysisApiFilterTopic(
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesAnalysisApiFilterTopic(
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns exercise field by enumber and topic_short.
         * @summary Get Exercise
         * @param {string} topicShort
         * @param {number} enumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiGetExercise(
            topicShort: string,
            enumber: number,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exercise>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiGetExercise(
                    topicShort,
                    enumber,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Return solution fields by snumber, enumber, topic_short
         * @summary Get Solution
         * @param {string} topicShort
         * @param {number} enumber
         * @param {number} snumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiGetSolution(
            topicShort: string,
            enumber: number,
            snumber: number,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Solution>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiGetSolution(
                    topicShort,
                    enumber,
                    snumber,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns topic fields for topic_short.
         * @summary Get Topic
         * @param {string} topicShort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiGetTopic(
            topicShort: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiGetTopic(
                    topicShort,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Return for all topics the number of exercises and the number of exercises correctly done by the current user.
         * @summary Get Topics Overview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiGetTopicsOverview(
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<TopicOverview>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiGetTopicsOverview(
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Return user data for exercise by enumber and topic_short.
         * @summary Get User Exercise
         * @param {string} topicShort
         * @param {number} enumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiGetUserExercise(
            topicShort: string,
            enumber: number,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<UserExercise>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiGetUserExercise(
                    topicShort,
                    enumber,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns username of current user.
         * @summary Get Userdata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiGetUserdata(
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Userdata>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiGetUserdata(options)
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns a list of all exercise tags.
         * @summary List Etag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiListEtag(
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<Etag>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiListEtag(options)
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns a list of all exercises optionally filtered by topic_short.
         * @summary List Exercise
         * @param {string} [topicShort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiListExercise(
            topicShort?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<ExerciseItem>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiListExercise(
                    topicShort,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Return all favourites of current user optionally filtered by topic_short.
         * @summary List Favourite
         * @param {string} [topicShort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiListFavourite(
            topicShort?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<Favourite>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiListFavourite(
                    topicShort,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Return all solutions optionally filtered by enumber and topic_short.
         * @summary List Solution
         * @param {string} [topicShort]
         * @param {number} [enumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiListSolution(
            topicShort?: string,
            enumber?: number,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<Solution>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiListSolution(
                    topicShort,
                    enumber,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns a list of all topics.
         * @summary List Topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiListTopic(
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<Topic>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiListTopic(options)
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns a list of all topic tags.
         * @summary List Ttag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiListTtag(
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<Ttag>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiListTtag(options)
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Return all exercise user data optionally filtered by topic_short.
         * @summary List User Exercise
         * @param {string} [topicShort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiListUserExercise(
            topicShort?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<UserExerciseItem>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiListUserExercise(
                    topicShort,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Patches current user\'s exercise (topic_short, enumber) by provided data.
         * @summary Patch User Exercise
         * @param {string} topicShort
         * @param {number} enumber
         * @param {UserExerciseIn} userExerciseIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesApiPatchUserExercise(
            topicShort: string,
            enumber: number,
            userExerciseIn: UserExerciseIn,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesApiPatchUserExercise(
                    topicShort,
                    enumber,
                    userExerciseIn,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns a filtered list of exercises optionally filtered with AND concat.
         * @summary Filter Exercises
         * @param {Array<string>} [topics]
         * @param {Array<string>} [itopicTitles]
         * @param {Array<number>} [enumbers]
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [etags]
         * @param {Array<string>} [ttags]
         * @param {Array<number>} [diffs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesFilterApiFilterExercises(
            topics?: Array<string>,
            itopicTitles?: Array<string>,
            enumbers?: Array<number>,
            ititles?: Array<string>,
            etags?: Array<string>,
            ttags?: Array<string>,
            diffs?: Array<number>,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<TopicExercise>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesFilterApiFilterExercises(
                    topics,
                    itopicTitles,
                    enumbers,
                    ititles,
                    etags,
                    ttags,
                    diffs,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns a filtered list of topics optionally filtered like filter_exercises.
         * @summary Filter Topic
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [tags]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesFilterApiFilterTopic(
            ititles?: Array<string>,
            tags?: Array<string>,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<Topic>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesFilterApiFilterTopic(
                    ititles,
                    tags,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns the info about the tool usage by course
         * @summary Course Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesStatsApiCourseInfo(
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesStatsApiCourseInfo(
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns analysis for given filter :returns:   - total:    Total number of exercises fiting the filter times users             - started:  Number of exercises with just a buffer that were never checked             - correct:  Number of correct exercises             - wrong:    Number of wrong exercises
         * @summary Exercises
         * @param {Array<string>} [topics]
         * @param {Array<string>} [itopicTitles]
         * @param {Array<number>} [enumbers]
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [etags]
         * @param {Array<string>} [ttags]
         * @param {Array<number>} [diffs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exercisesStatsApiExercises(
            topics?: Array<string>,
            itopicTitles?: Array<string>,
            enumbers?: Array<number>,
            ititles?: Array<string>,
            etags?: Array<string>,
            ttags?: Array<string>,
            diffs?: Array<number>,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stats>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.exercisesStatsApiExercises(
                    topics,
                    itopicTitles,
                    enumbers,
                    ititles,
                    etags,
                    ttags,
                    diffs,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Create Feedback. Only 3 Feedbacks are allowed.
         * @summary Create Feedback
         * @param {Feedback} feedback
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedbackApiCreateFeedback(
            feedback: Feedback,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.feedbackApiCreateFeedback(
                    feedback,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Executes Query with checking correctness, saves buffer and correctness This also resets the DB.
         * @summary Check Answer Correct Api
         * @param {QueryIn} queryIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pgStudApiCheckAnswerCorrectApi(
            queryIn: QueryIn,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<CheckAnswerOut>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.pgStudApiCheckAnswerCorrectApi(
                    queryIn,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * If the schema for the topic is not installed the db will be installed. enumber is being ignored
         * @summary Check Or Install Db
         * @param {ExerciseSpeciIn} exerciseSpeciIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pgStudApiCheckOrInstallDb(
            exerciseSpeciIn: ExerciseSpeciIn,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.pgStudApiCheckOrInstallDb(
                    exerciseSpeciIn,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Executes Query without checking correctness and saves buffer Does not reset DB
         * @summary Execute Query
         * @param {QueryIn} queryIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pgStudApiExecuteQuery(
            queryIn: QueryIn,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryOut>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.pgStudApiExecuteQuery(
                    queryIn,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Resets DB to specific exercise
         * @summary Reset Db
         * @param {ExerciseSpeciIn} exerciseSpeciIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pgStudApiResetDb(
            exerciseSpeciIn: ExerciseSpeciIn,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.pgStudApiResetDb(
                    exerciseSpeciIn,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
        /**
         * Returns the output of the Solution number 1 after reseting the DB
         * @summary Solution Result
         * @param {ExerciseSpeciIn} exerciseSpeciIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pgStudApiSolutionResult(
            exerciseSpeciIn: ExerciseSpeciIn,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryOut>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.pgStudApiSolutionResult(
                    exerciseSpeciIn,
                    options,
                )
            return createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                BASE_PATH,
                configuration,
            )
        },
    }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Returns analysis for given filter :returns:   - total:    Total number of exercises fiting the filter             - started:  Number of exercises with just a buffer that were never checked             - correct:  Number of correct exercises             - wrong:    Number of wrong exercises
         * @summary Exercises
         * @param {Array<string>} [topics]
         * @param {Array<string>} [itopicTitles]
         * @param {Array<number>} [enumbers]
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [etags]
         * @param {Array<string>} [ttags]
         * @param {Array<number>} [diffs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesAnalysisApiExercises(
            topics?: Array<string>,
            itopicTitles?: Array<string>,
            enumbers?: Array<number>,
            ititles?: Array<string>,
            etags?: Array<string>,
            ttags?: Array<string>,
            diffs?: Array<number>,
            options?: any,
        ): AxiosPromise<Analysis> {
            return localVarFp
                .exercisesAnalysisApiExercises(
                    topics,
                    itopicTitles,
                    enumbers,
                    ititles,
                    etags,
                    ttags,
                    diffs,
                    options,
                )
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns the info about the tool usage by course
         * @summary Filter Topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesAnalysisApiFilterTopic(options?: any): AxiosPromise<Course> {
            return localVarFp
                .exercisesAnalysisApiFilterTopic(options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns exercise field by enumber and topic_short.
         * @summary Get Exercise
         * @param {string} topicShort
         * @param {number} enumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetExercise(
            topicShort: string,
            enumber: number,
            options?: any,
        ): AxiosPromise<Exercise> {
            return localVarFp
                .exercisesApiGetExercise(topicShort, enumber, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Return solution fields by snumber, enumber, topic_short
         * @summary Get Solution
         * @param {string} topicShort
         * @param {number} enumber
         * @param {number} snumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetSolution(
            topicShort: string,
            enumber: number,
            snumber: number,
            options?: any,
        ): AxiosPromise<Solution> {
            return localVarFp
                .exercisesApiGetSolution(topicShort, enumber, snumber, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns topic fields for topic_short.
         * @summary Get Topic
         * @param {string} topicShort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetTopic(
            topicShort: string,
            options?: any,
        ): AxiosPromise<Topic> {
            return localVarFp
                .exercisesApiGetTopic(topicShort, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Return for all topics the number of exercises and the number of exercises correctly done by the current user.
         * @summary Get Topics Overview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetTopicsOverview(
            options?: any,
        ): AxiosPromise<Array<TopicOverview>> {
            return localVarFp
                .exercisesApiGetTopicsOverview(options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Return user data for exercise by enumber and topic_short.
         * @summary Get User Exercise
         * @param {string} topicShort
         * @param {number} enumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetUserExercise(
            topicShort: string,
            enumber: number,
            options?: any,
        ): AxiosPromise<UserExercise> {
            return localVarFp
                .exercisesApiGetUserExercise(topicShort, enumber, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns username of current user.
         * @summary Get Userdata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiGetUserdata(options?: any): AxiosPromise<Userdata> {
            return localVarFp
                .exercisesApiGetUserdata(options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns a list of all exercise tags.
         * @summary List Etag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListEtag(options?: any): AxiosPromise<Array<Etag>> {
            return localVarFp
                .exercisesApiListEtag(options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns a list of all exercises optionally filtered by topic_short.
         * @summary List Exercise
         * @param {string} [topicShort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListExercise(
            topicShort?: string,
            options?: any,
        ): AxiosPromise<Array<ExerciseItem>> {
            return localVarFp
                .exercisesApiListExercise(topicShort, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Return all favourites of current user optionally filtered by topic_short.
         * @summary List Favourite
         * @param {string} [topicShort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListFavourite(
            topicShort?: string,
            options?: any,
        ): AxiosPromise<Array<Favourite>> {
            return localVarFp
                .exercisesApiListFavourite(topicShort, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Return all solutions optionally filtered by enumber and topic_short.
         * @summary List Solution
         * @param {string} [topicShort]
         * @param {number} [enumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListSolution(
            topicShort?: string,
            enumber?: number,
            options?: any,
        ): AxiosPromise<Array<Solution>> {
            return localVarFp
                .exercisesApiListSolution(topicShort, enumber, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns a list of all topics.
         * @summary List Topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListTopic(options?: any): AxiosPromise<Array<Topic>> {
            return localVarFp
                .exercisesApiListTopic(options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns a list of all topic tags.
         * @summary List Ttag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListTtag(options?: any): AxiosPromise<Array<Ttag>> {
            return localVarFp
                .exercisesApiListTtag(options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Return all exercise user data optionally filtered by topic_short.
         * @summary List User Exercise
         * @param {string} [topicShort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiListUserExercise(
            topicShort?: string,
            options?: any,
        ): AxiosPromise<Array<UserExerciseItem>> {
            return localVarFp
                .exercisesApiListUserExercise(topicShort, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Patches current user\'s exercise (topic_short, enumber) by provided data.
         * @summary Patch User Exercise
         * @param {string} topicShort
         * @param {number} enumber
         * @param {UserExerciseIn} userExerciseIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesApiPatchUserExercise(
            topicShort: string,
            enumber: number,
            userExerciseIn: UserExerciseIn,
            options?: any,
        ): AxiosPromise<void> {
            return localVarFp
                .exercisesApiPatchUserExercise(
                    topicShort,
                    enumber,
                    userExerciseIn,
                    options,
                )
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns a filtered list of exercises optionally filtered with AND concat.
         * @summary Filter Exercises
         * @param {Array<string>} [topics]
         * @param {Array<string>} [itopicTitles]
         * @param {Array<number>} [enumbers]
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [etags]
         * @param {Array<string>} [ttags]
         * @param {Array<number>} [diffs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesFilterApiFilterExercises(
            topics?: Array<string>,
            itopicTitles?: Array<string>,
            enumbers?: Array<number>,
            ititles?: Array<string>,
            etags?: Array<string>,
            ttags?: Array<string>,
            diffs?: Array<number>,
            options?: any,
        ): AxiosPromise<Array<TopicExercise>> {
            return localVarFp
                .exercisesFilterApiFilterExercises(
                    topics,
                    itopicTitles,
                    enumbers,
                    ititles,
                    etags,
                    ttags,
                    diffs,
                    options,
                )
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns a filtered list of topics optionally filtered like filter_exercises.
         * @summary Filter Topic
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [tags]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesFilterApiFilterTopic(
            ititles?: Array<string>,
            tags?: Array<string>,
            options?: any,
        ): AxiosPromise<Array<Topic>> {
            return localVarFp
                .exercisesFilterApiFilterTopic(ititles, tags, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns the info about the tool usage by course
         * @summary Course Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesStatsApiCourseInfo(options?: any): AxiosPromise<Course> {
            return localVarFp
                .exercisesStatsApiCourseInfo(options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns analysis for given filter :returns:   - total:    Total number of exercises fiting the filter times users             - started:  Number of exercises with just a buffer that were never checked             - correct:  Number of correct exercises             - wrong:    Number of wrong exercises
         * @summary Exercises
         * @param {Array<string>} [topics]
         * @param {Array<string>} [itopicTitles]
         * @param {Array<number>} [enumbers]
         * @param {Array<string>} [ititles]
         * @param {Array<string>} [etags]
         * @param {Array<string>} [ttags]
         * @param {Array<number>} [diffs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exercisesStatsApiExercises(
            topics?: Array<string>,
            itopicTitles?: Array<string>,
            enumbers?: Array<number>,
            ititles?: Array<string>,
            etags?: Array<string>,
            ttags?: Array<string>,
            diffs?: Array<number>,
            options?: any,
        ): AxiosPromise<Stats> {
            return localVarFp
                .exercisesStatsApiExercises(
                    topics,
                    itopicTitles,
                    enumbers,
                    ititles,
                    etags,
                    ttags,
                    diffs,
                    options,
                )
                .then((request) => request(axios, basePath))
        },
        /**
         * Create Feedback. Only 3 Feedbacks are allowed.
         * @summary Create Feedback
         * @param {Feedback} feedback
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedbackApiCreateFeedback(
            feedback: Feedback,
            options?: any,
        ): AxiosPromise<void> {
            return localVarFp
                .feedbackApiCreateFeedback(feedback, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Executes Query with checking correctness, saves buffer and correctness This also resets the DB.
         * @summary Check Answer Correct Api
         * @param {QueryIn} queryIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pgStudApiCheckAnswerCorrectApi(
            queryIn: QueryIn,
            options?: any,
        ): AxiosPromise<CheckAnswerOut> {
            return localVarFp
                .pgStudApiCheckAnswerCorrectApi(queryIn, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * If the schema for the topic is not installed the db will be installed. enumber is being ignored
         * @summary Check Or Install Db
         * @param {ExerciseSpeciIn} exerciseSpeciIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pgStudApiCheckOrInstallDb(
            exerciseSpeciIn: ExerciseSpeciIn,
            options?: any,
        ): AxiosPromise<Message> {
            return localVarFp
                .pgStudApiCheckOrInstallDb(exerciseSpeciIn, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Executes Query without checking correctness and saves buffer Does not reset DB
         * @summary Execute Query
         * @param {QueryIn} queryIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pgStudApiExecuteQuery(
            queryIn: QueryIn,
            options?: any,
        ): AxiosPromise<QueryOut> {
            return localVarFp
                .pgStudApiExecuteQuery(queryIn, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Resets DB to specific exercise
         * @summary Reset Db
         * @param {ExerciseSpeciIn} exerciseSpeciIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pgStudApiResetDb(
            exerciseSpeciIn: ExerciseSpeciIn,
            options?: any,
        ): AxiosPromise<Message> {
            return localVarFp
                .pgStudApiResetDb(exerciseSpeciIn, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * Returns the output of the Solution number 1 after reseting the DB
         * @summary Solution Result
         * @param {ExerciseSpeciIn} exerciseSpeciIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pgStudApiSolutionResult(
            exerciseSpeciIn: ExerciseSpeciIn,
            options?: any,
        ): AxiosPromise<QueryOut> {
            return localVarFp
                .pgStudApiSolutionResult(exerciseSpeciIn, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns analysis for given filter :returns:   - total:    Total number of exercises fiting the filter             - started:  Number of exercises with just a buffer that were never checked             - correct:  Number of correct exercises             - wrong:    Number of wrong exercises
     * @summary Exercises
     * @param {Array<string>} [topics]
     * @param {Array<string>} [itopicTitles]
     * @param {Array<number>} [enumbers]
     * @param {Array<string>} [ititles]
     * @param {Array<string>} [etags]
     * @param {Array<string>} [ttags]
     * @param {Array<number>} [diffs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesAnalysisApiExercises(
        topics?: Array<string>,
        itopicTitles?: Array<string>,
        enumbers?: Array<number>,
        ititles?: Array<string>,
        etags?: Array<string>,
        ttags?: Array<string>,
        diffs?: Array<number>,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesAnalysisApiExercises(
                topics,
                itopicTitles,
                enumbers,
                ititles,
                etags,
                ttags,
                diffs,
                options,
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns the info about the tool usage by course
     * @summary Filter Topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesAnalysisApiFilterTopic(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .exercisesAnalysisApiFilterTopic(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns exercise field by enumber and topic_short.
     * @summary Get Exercise
     * @param {string} topicShort
     * @param {number} enumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiGetExercise(
        topicShort: string,
        enumber: number,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesApiGetExercise(topicShort, enumber, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Return solution fields by snumber, enumber, topic_short
     * @summary Get Solution
     * @param {string} topicShort
     * @param {number} enumber
     * @param {number} snumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiGetSolution(
        topicShort: string,
        enumber: number,
        snumber: number,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesApiGetSolution(topicShort, enumber, snumber, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns topic fields for topic_short.
     * @summary Get Topic
     * @param {string} topicShort
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiGetTopic(
        topicShort: string,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesApiGetTopic(topicShort, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Return for all topics the number of exercises and the number of exercises correctly done by the current user.
     * @summary Get Topics Overview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiGetTopicsOverview(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .exercisesApiGetTopicsOverview(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Return user data for exercise by enumber and topic_short.
     * @summary Get User Exercise
     * @param {string} topicShort
     * @param {number} enumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiGetUserExercise(
        topicShort: string,
        enumber: number,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesApiGetUserExercise(topicShort, enumber, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns username of current user.
     * @summary Get Userdata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiGetUserdata(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .exercisesApiGetUserdata(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns a list of all exercise tags.
     * @summary List Etag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiListEtag(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .exercisesApiListEtag(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns a list of all exercises optionally filtered by topic_short.
     * @summary List Exercise
     * @param {string} [topicShort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiListExercise(
        topicShort?: string,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesApiListExercise(topicShort, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Return all favourites of current user optionally filtered by topic_short.
     * @summary List Favourite
     * @param {string} [topicShort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiListFavourite(
        topicShort?: string,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesApiListFavourite(topicShort, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Return all solutions optionally filtered by enumber and topic_short.
     * @summary List Solution
     * @param {string} [topicShort]
     * @param {number} [enumber]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiListSolution(
        topicShort?: string,
        enumber?: number,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesApiListSolution(topicShort, enumber, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns a list of all topics.
     * @summary List Topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiListTopic(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .exercisesApiListTopic(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns a list of all topic tags.
     * @summary List Ttag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiListTtag(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .exercisesApiListTtag(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Return all exercise user data optionally filtered by topic_short.
     * @summary List User Exercise
     * @param {string} [topicShort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiListUserExercise(
        topicShort?: string,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesApiListUserExercise(topicShort, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Patches current user\'s exercise (topic_short, enumber) by provided data.
     * @summary Patch User Exercise
     * @param {string} topicShort
     * @param {number} enumber
     * @param {UserExerciseIn} userExerciseIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesApiPatchUserExercise(
        topicShort: string,
        enumber: number,
        userExerciseIn: UserExerciseIn,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesApiPatchUserExercise(
                topicShort,
                enumber,
                userExerciseIn,
                options,
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns a filtered list of exercises optionally filtered with AND concat.
     * @summary Filter Exercises
     * @param {Array<string>} [topics]
     * @param {Array<string>} [itopicTitles]
     * @param {Array<number>} [enumbers]
     * @param {Array<string>} [ititles]
     * @param {Array<string>} [etags]
     * @param {Array<string>} [ttags]
     * @param {Array<number>} [diffs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesFilterApiFilterExercises(
        topics?: Array<string>,
        itopicTitles?: Array<string>,
        enumbers?: Array<number>,
        ititles?: Array<string>,
        etags?: Array<string>,
        ttags?: Array<string>,
        diffs?: Array<number>,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesFilterApiFilterExercises(
                topics,
                itopicTitles,
                enumbers,
                ititles,
                etags,
                ttags,
                diffs,
                options,
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns a filtered list of topics optionally filtered like filter_exercises.
     * @summary Filter Topic
     * @param {Array<string>} [ititles]
     * @param {Array<string>} [tags]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesFilterApiFilterTopic(
        ititles?: Array<string>,
        tags?: Array<string>,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesFilterApiFilterTopic(ititles, tags, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns the info about the tool usage by course
     * @summary Course Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesStatsApiCourseInfo(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .exercisesStatsApiCourseInfo(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns analysis for given filter :returns:   - total:    Total number of exercises fiting the filter times users             - started:  Number of exercises with just a buffer that were never checked             - correct:  Number of correct exercises             - wrong:    Number of wrong exercises
     * @summary Exercises
     * @param {Array<string>} [topics]
     * @param {Array<string>} [itopicTitles]
     * @param {Array<number>} [enumbers]
     * @param {Array<string>} [ititles]
     * @param {Array<string>} [etags]
     * @param {Array<string>} [ttags]
     * @param {Array<number>} [diffs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exercisesStatsApiExercises(
        topics?: Array<string>,
        itopicTitles?: Array<string>,
        enumbers?: Array<number>,
        ititles?: Array<string>,
        etags?: Array<string>,
        ttags?: Array<string>,
        diffs?: Array<number>,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .exercisesStatsApiExercises(
                topics,
                itopicTitles,
                enumbers,
                ititles,
                etags,
                ttags,
                diffs,
                options,
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Create Feedback. Only 3 Feedbacks are allowed.
     * @summary Create Feedback
     * @param {Feedback} feedback
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedbackApiCreateFeedback(
        feedback: Feedback,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .feedbackApiCreateFeedback(feedback, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Executes Query with checking correctness, saves buffer and correctness This also resets the DB.
     * @summary Check Answer Correct Api
     * @param {QueryIn} queryIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pgStudApiCheckAnswerCorrectApi(
        queryIn: QueryIn,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .pgStudApiCheckAnswerCorrectApi(queryIn, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * If the schema for the topic is not installed the db will be installed. enumber is being ignored
     * @summary Check Or Install Db
     * @param {ExerciseSpeciIn} exerciseSpeciIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pgStudApiCheckOrInstallDb(
        exerciseSpeciIn: ExerciseSpeciIn,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .pgStudApiCheckOrInstallDb(exerciseSpeciIn, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Executes Query without checking correctness and saves buffer Does not reset DB
     * @summary Execute Query
     * @param {QueryIn} queryIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pgStudApiExecuteQuery(
        queryIn: QueryIn,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .pgStudApiExecuteQuery(queryIn, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Resets DB to specific exercise
     * @summary Reset Db
     * @param {ExerciseSpeciIn} exerciseSpeciIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pgStudApiResetDb(
        exerciseSpeciIn: ExerciseSpeciIn,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .pgStudApiResetDb(exerciseSpeciIn, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Returns the output of the Solution number 1 after reseting the DB
     * @summary Solution Result
     * @param {ExerciseSpeciIn} exerciseSpeciIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pgStudApiSolutionResult(
        exerciseSpeciIn: ExerciseSpeciIn,
        options?: AxiosRequestConfig,
    ) {
        return DefaultApiFp(this.configuration)
            .pgStudApiSolutionResult(exerciseSpeciIn, options)
            .then((request) => request(this.axios, this.basePath))
    }
}
