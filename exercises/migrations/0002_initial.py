# Generated by Django 4.2.1 on 2023-06-09 07:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('exercises', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='userexercise',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='topic',
            name='tag',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='exercises.ttag'),
        ),
        migrations.AddField(
            model_name='solution',
            name='exercise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exercises.exercise'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='tags',
            field=models.ManyToManyField(to='exercises.etag'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exercises.topic'),
        ),
        migrations.AddConstraint(
            model_name='userexercise',
            constraint=models.UniqueConstraint(fields=('user', 'exercise'), name='user_exer_pk'),
        ),
        migrations.AddConstraint(
            model_name='solution',
            constraint=models.UniqueConstraint(fields=('exercise', 'snumber'), name='solution_pk'),
        ),
        migrations.AddConstraint(
            model_name='exercise',
            constraint=models.UniqueConstraint(fields=('topic', 'enumber'), name='exer_pk'),
        ),
        migrations.AddConstraint(
            model_name='exercise',
            constraint=models.CheckConstraint(check=models.Q(('is_select', True), models.Q(('eval_statement', None), _negated=True), _connector='OR'), name='If the solution to the exercise is not a select\n                an eval_statement must be given'),
        ),
    ]
