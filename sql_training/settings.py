# SPDX-FileCopyrightText: 2023 2023, Nicolas Bota, Marcel Geiger, Florian Paul, Rajbir Singh, Niklas Sirch, Jan Swiridow, Duc Minh Vu, Mike Wegele
#
# SPDX-License-Identifier: GPL-3.0-or-later

"""
Django settings for sql_training project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
from typing import List

from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv

from sql_training.utils import load_theme_colors

load_dotenv(".env")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", 1))
DEPLOY = int(os.environ.get("DEPLOY", 0))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY",
    "DJANGO-INSECURE-sdfkajsdlakdjsfasdauhdfovb79469wu7eyr",
)

# Application definition

INSTALLED_APPS = [
    "rangefilter",
    "ltiapi",
    "exercises",
    "feedback",
    "django_ace",
    "ninja",
    "modeltranslation",
    "pylti1p3.contrib.django.lti1p3_tool_config",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "csp.middleware.CSPMiddleware",
    # CSP is used instead
    # "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "sql_training.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "sql_training.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

if DEPLOY:
    CONN_MAX_AGE = 120  # TODO too long?
    CONN_HEALTH_CHECKS = True  # TODO needed?

# Cache
# https://docs.djangoproject.com/en/4.2/topics/cache/

if DEPLOY:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
            "LOCATION": str(os.environ.get("MEMCACHE_HOST", "127.0.0.1"))
            + ":"
            + str(os.environ.get("MEMCACHE_PORT", "11211")),
        }
    }


# ALLOWED_HOSTS
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "*").split(" ")

# SSL
if DEPLOY:
    # https://docs.djangoproject.com/en/4.2/ref/middleware/#http-strict-transport-security
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = (
        "HTTP_X_FORWARDED_PROTO",
        "https",
    )  # needs to be set in proxy
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Session Engine
# https://docs.djangoproject.com/en/dev/topics/http/sessions/#configuring-the-session-engine

SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LOGIN_URL = "lti/login-lms"

# https://docs.djangoproject.com/en/3.2/ref/settings/#csrf-trusted-origins

# CSRF_TRUSTED_ORIGINS can be default because the openid secured ltiapi methods
# are csrf_exempt
CSRF_TRUSTED_ORIGINS: List[str] = []

# Content-Security-Policy
# https://django-csp.readthedocs.io/en/latest/configuration.html#configuration-chapter

CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'",)
CSP_OBJECT_SRC = ("'none'",)
CSP_BASE_URI = ("'none'",)
CSP_CONNECT_SRC = "'self'"
CSP_IMG_SRC = ("'self'",)
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")  # could be solved with hashes
CSP_FRAME_ANCESTORS = ("'self'",)
CSP_FORM_ACTION = ("'self'",)
CSP_FRAME_SRC = ("'self'",)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "frontend", "dist")]
STATIC_ROOT = BASE_DIR / "static"

MEDIA_ROOT = BASE_DIR / "exercises_data"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "CET"

USE_I18N = True

USE_TZ = True

LANGUAGES = [
    ("en", _("English")),
    ("de", _("German")),
]

# Logging
# https://docs.djangoproject.com/en/4.2/topics/logging/

if DEPLOY:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "file": {
                "level": "INFO",
                "class": "logging.handlers.TimedRotatingFileHandler",
                "filename": "/var/log/sql-training/info.log",
                "interval": 1,
                "backupCount": 3,
            },
        },
        "loggers": {
            "django": {
                "handlers": ["file"],
                "level": "INFO",
                "propagate": True,
            },
        },
    }

# Settings for LTI ToolConfig
# see lti.tool_config.py

# https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#auth-custom-user
AUTH_USER_MODEL = "ltiapi.LTIUser"

LINK_BASE = os.environ.get("LINK_BASE", "127.0.0.1:8000")


LTI_CONFIG = {
    "title": "SQL-Train",
    "description": "SQL-Train offers interactive SQL exercises for LMS-Platforms",
}

# SQL-TRAINING

PG_STUD_CONNINFO = {
    "host": os.environ.get("PG_STUD_HOST"),
    "port": os.environ.get("PG_STUD_PORT"),
    "password": "NOT_NEEDED_HOST_TRUST",
}

PG_TEST_CONNINFO = {
    "user": os.environ.get("PG_TEST_USER"),
    "password": os.environ.get("PG_TEST_PASSWORD"),
    "dbname": os.environ.get("PG_TEST_DB"),
    "host": os.environ.get("PG_TEST_HOST"),
    "port": os.environ.get("PG_TEST_PORT"),
}

theme_colors = load_theme_colors()

DEFAULT_TEMPLATE_CONTEXT = theme_colors | {
    "lms_url": os.environ.get("LMS_URL", "https://moodle.example.com/")
}

FIXTURE_DIRS = [BASE_DIR / "exercises_data"]
